package Chap04;

public class IntQueue {
	//int형 고정 길이 큐
	private int[] que; //큐용 배열
	private int capacity; //큐의 용량
	private int front; //맨 앞의 요소 커서
	private int rear; //맨 뒤의 요소 커서
	private int num; //현재 데이터 개수
	
	//실행시 예외 : 큐가 비어 있음.
	public class EmptyIntQueueException extends RuntimeException {
		public EmptyIntQueueException() {}
	}
	
	//실행시 예외 : 큐가 가득 참
	public class OverflowIntQueueException extends RuntimeException {
		public OverflowIntQueueException() {}
	}
	
	//생성자
	public IntQueue (int maxlen) {
		num = front = rear = 0;
		capacity = maxlen;
		try {
			que = new int[capacity];		
		}catch(OutOfMemoryError e) {
			//생성할 수 없음
			capacity = 0;
		}
	}
	
	//큐에 데이터를 인큐
	public int enque(int x) throws OverflowIntQueueException {
		if (num >= capacity)
			throw new OverflowIntQueueException();
		que[rear++] = x;
		num++;
		if(rear == capacity)
			rear = 0;
		return x;
 	}
	
	//큐에 데이터를 디큐
	public int deque() throws EmptyIntQueueException {
		if (num <= 0)
			throw new EmptyIntQueueException(); //큐가 비어있음.
		int x = que[front++];
		num --;
		if (front == capacity)
			front = 0;
		return x;
	}
	
	//큐에서 데이터를 피크
	public int peek() throws EmptyIntQueueException {
		if (num <= 0)
			throw new EmptyIntQueueException();
		return que[front];
	}
	
	//큐를 비움
	public void clear() {
		num = front = rear = 0;
	}
	
	//큐에서 x를 검색하여 인덱스(찾지 못하면 -1을 반환)
	public int indexOf(int x) {
		for (int i = 0; i<num; i++) {
			int idx = (i+front) % capacity;
			if (que[idx] == x)
				return idx; //검색 성공
		}
		return -1; //검색 실패
	}
	
	//큐의 용량을 반환
	public int getCapacity() {
		return capacity;
	}
	
	//큐에 쌓여 있는 데이터 개수를 반환
	public int size() {
		return num;
	}
	
	//큐가 비어있나요?
	public boolean isEmpty() {
		return num <= 0;
	}
	
	//큐가 가득 찼나요?
	public boolean isFull() {
		return num >= capacity;
	}
	
	//큐안의 모든 데이터를 프런트 -> 리어 순서로 출력
	public void dump() {
		if (num <= 0)
			System.out.println("큐가 비어있습니다.");
		else {
			for (int i = 0; i<num; i++)
				System.out.print(que[(i+front)%capacity] + " ");
			System.out.println();
		}
	}
	
	//임의로 검색하는 메소드
	public int search(int x) {
		for (int i = 0; i<num; i++)
			if(que[(i+front)%capacity] == x)
				return i+1;
		return 0;
	}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
